<!DOCTYPE html>
<html lang="ko">
<head>
    <%- include('header') %>
    <script src="https://unpkg.com/hangul-js" type="text/javascript"></script>
    <style>
        * {
            font-family: 'Noto Sans KR', sans-serif;
        }

        body {
            background-color: #2E3035;
            color: white;
        }

        .hidden {
            display: none !important;
        }

        @media (max-width: 800px) {
            .introduce_box {
                flex-direction: column !important;
                justify-self: unset !important;
            }
            
            .text_area {
                font-size: 1.7em !important;
            }
            
            .introduce_img {
                width: 100dvw !important;
            }

            .embed-box {
                width: 70%;
            }

            .discord-embed {
                width: auto !important;
            }

            .introduce_text {
                width: 100vw !important;
                justify-content: center !important;
            }

            .introduce_text > div {
                margin: 0 !important;
            }
        }

        .alert {
            transition: all 0.2s linear;
            position: fixed;
            top: 20px;
            right: 20px;
            left: 20px;

            z-index: 9;
        }

        .alert-hidden {
            opacity: 0;
        }

        .introduce {
            overflow: hidden;
        }

        .introduce_box {
            display: flex;
            flex-direction: row;
            justify-content: center;
            background-color: #2E3035;
            height: 100dvh;
            width: 100dvw;
            color: white;
        }

        .introduce_text {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            float: right;
            flex: 4;
        }

        .introduce_text > div {
            margin-left: 50px;
        }

        .text_area {
            vertical-align: middle;
            margin-bottom: 10px;
            font-size: 2em;
        }

        #text_title, #text_description1, #text_description2 {
            word-break: keep-all;
        }

        .introduce_img {
            float: left;
            width: 50%;
            height: 100dvh;
            overflow-y: hidden;
            overflow-x: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            flex: 6;
        }

        .popup_dim {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100dvw;
            height: 100dvh;
            position: fixed;
            background-color: rgba(0,0,0,0.7);
            z-index: 10;
        }

        .popup_box {
            position: relative;
            background: white;
            border-radius: 20px;
            min-width: 400px;
            max-width: 680px;
            width: 80dvw;
            padding: 50px;
        }

        .popup_box {
            color:black;
        }

        .popup_box > .title > h3 {
            display: inline-block;
        }

        .popup_box > .title > .close {
            float: right;
        }

        .buttons {
            width: 100%;
        }

        #webhookURL {
            margin-top: 20px;
        }

        .btn.edit, .btn.subscribe {
            float: right;
            margin: 0 2px;
        }

        .options {
            margin-top: 20px;
        }

        .options > div {
            margin-bottom: 20px;
        }

        .easteregg {
            position: absolute;
            bottom: 5px;
            right: 5px;
            color: #2E3035; text-decoration: line-through;
            font-size: 15px;
        }

        .footer {
            margin-top: 5px;
            margin-bottom: 10px;
            width: 100%;
            height: 20dvh;
            padding: 10px;
            text-align: center;
        }

        .footer > p > a {
            color: white;
            text-decoration: none;
        }

        .profile {
            clip-path: circle(20px at 20px 20px);
        }

        .nickname {
            margin-left: 10px;
            vertical-align: top;
            font-size: 1.1em;
            font-weight: 400;
            font-family: sans-serif;
        }

        .embed-box {
            width: 80%;
        }

        .discord-embed {
            margin-left: 50px;
            padding: 20px;
            background-color: #2B2D31;
            max-width: 700px;
            width: 100%;
            max-height: 80vh;
            border-left: 5px solid #1DA0F2;
            border-radius: 5px;
            transition: opacity .25s ease-in-out, max-height .5s ease-in-out;
        }

        .discord-embed > a {
            text-decoration: none;
            color: #00A8FC;
        }

        .embed-content {
            max-height: 100vh;
            margin-top: 10px;
            margin-bottom: 10px;
            transition: opacity .25s ease-in-out, max-height .5s ease-in-out;
        }

        .embed-footer {
            font-size: .75rem;
        }

        .embed-footer > * {
            vertical-align: middle;
        }

        .embed-footer > img {
            width: 20px;
            height: 20px;
            margin-right: 5px;
        }

        .profile {
            width: 40px;
            height: 40px;
        }

        .notice {
            padding: 10px;
            max-width: 1250px;
            margin: 0 auto;
        }

        .notice-list {
            max-height: 500px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="main">
        <div class="popup_dim hidden">
            <div class="popup_box">
                <div class="title">
                    <h3>디스코드 웹후크 구독</h3>
                    <button onclick="closeRegister()" class="btn close"><i class="fa-solid fa-xmark"></i></button>
                    <br>
                    <a href="/howto" target="_blank">웹후크 생성방법</a>
                </div>
                <div action="javascript:void(0)" id="registerForm">
                    <div class="input-group has-validation">
                        <input id="webhookURL" type="text" class="form-control is-invaild" value="https://discord.com/api/webhooks/1254054101390462976/WXk_ZtFJ5JtgoK8rVD9Q-wSVZFhQieCcc-ohowwfs5X6eWouNIz4Bn4bRx9LAA82xPiE" placeholder="디스코드 웹후크 URL">
                        <div class="invalid-feedback">
                            올바른 웹후크 URL을 입력해주세요.
                        </div>
                    </div>
                    <div class="options">
                        <input onchange="changeRoleIDStatus(event)" type="checkbox" class="form-check-input" id="allowMention">
                        <label for="allowMention" class="form-check-label">특정 역할 맨션하기</label>
                        <div class="input-group has-validation">
                            <input type="text" value="@everyone" disabled class="form-control" id="roleId" placeholder="역할 ID 입력">
                            <div class="invalid-feedback">
                                역할 ID는 @everyone, @here 혹은 숫자로 이루어저있어야합니다.
                            </div>
                        </div>
                        <div>
                            <input type="checkbox" id="allowReceiveNoti" class="form-check-input" value="공지사항 수신하기" checked>
                            <label for="allowReceiveNoti" class="form-check-label">공지사항 수신하기</label>
                        </div>
                    </div>
                    <div class="buttons">
                        <input type="button" onclick="unregisterWebhook()" class="btn btn-danger delete" value="구독취소" />
                        <input type="button" onclick="registerWebhook()" class="btn btn-success subscribe" value="구독"/>
                        <input type="button" onclick="editWebhook()" class="btn btn-primary edit" value="수정" />
                    </div>
                </div>
            </div>
        </div>
        <div id="success" class="alert alert-success alert-hidden" role="alert">
            웹후크가 성공적으로 구독되었습니다
        </div>
        <div id="error" class="alert alert-danger alert-hidden" role="alert">
            웹후크 구독 취소 실패: 등록된 웹후크가 없습니다
        </div>
        <div class="introduce">
            <div class="introduce_box">
                <div class="introduce_img">
                    <div class="embed-box">
                        <div class="profile-box">
                            <img class="profile" src="/profile.jpg">
                            <span class="nickname">마훅 - 마후 트윗 번역봇</span>
                        </div>
                        <div class="discord-embed">
                            <a href="https://x.com/uni_mafumafu" target="_blank"><strong>New Tweet Release!</strong></a>
                            <div class="embed-content">
                            </div>
                            <div class="embed-footer">
                                <img src="/logo.png">
                                <span>마훅 - 마후마후 트윗을 한국어로, 디스코드에서</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="introduce_text">
                    <div>
                        <div class="text_area">
                            <span id="text_title">마훅</span><br>
                            <span id="text_description1">한글 번역된 마후마후 트윗을,</span><br>
                            <span id="text_description2">디스코드에서.</span>
                        </div>
                        <button class="btn btn-primary" onclick="javascript:openRegister()">웹후크 등록 · 수정</button>
                    </div>
                </div>
            </div>
        </div>
        <hr>
        <div class="notice">
            <h2>공지사항</h2><br>
            <div class="notice-list"></div>
        </div>
        <hr>
        <div class="footer">
            <p>
                마훅의 한국어 번역은 DeepL 번역 API를 이용하여 제공됩니다.
            </p>
            <p>
                마훅은 X(구 Twitter)의 <strong>비공식 API를 사용하여 개발</strong>되었습니다.<br>
                따라서 <strong>서비스에 예기치 못한 장애가 발생</strong>할 수 있으며, <strong>X(구 Twitter)사의 요청에 따라 서비스 운영이 종료될 수 있습니다.</strong>
            </p>
            <p>Contact: contact@bass9030.dev</p>
            <p>
                깃허브<br>
                <a class="community" href="https://github.com/bass9030/mafu-webhook" target="_blank"><i class="fa-brands fa-github"></i></a>
            </p>
        </div>
        <a class="easteregg" href="https://youtu.be/ucbx9we6EHk?si=VRZfMeluYT70_gZ_" target="_blank">女の子になりたい</a>
    </div>
    <script>
        const WEBHOOK_REGEX = /https:\/\/discord(app)?.com\/api\/webhooks\/([^\/]+)\/([^\/]+)/;
        const ROLEID_REGEX = /^[0-9]+$/;

        const EMBED_TEXT = [
            '가끔씩 낮잠을 자다가 총 12시간 정도 잠을 자는 경우가 있는데, 친구에게「수면의 질을 높이는 보충제를 먹으면, 두 번 자지 않고 상쾌하게 일어날 수 있게 될 거야.」라는 말을 듣고 시도해보니, 최고 품질의 12시간 수면에 성공했습니다!!!좋은 아침입니다!!오늘 아무것도 하지 않습니다!!!',
            '오랜만에 여름을 느낄 수 있는 곡을 쓸 수 있었어요.<br>역시 일본풍의 곡을 좋아한다.여름이 끝날 때까지 기다릴 수 있을까?.',
            '마후사카에서 놀고 왔습니다<br><br>마후「오늘 아침까지 일했어! 하지만 노는 재미로 열심히 놀 수 있었어요 ദ്ദി ˃ ᵕ ˂ )」<br><br>사카타 「잠을 푹 자야 머리가 돌아가지 않겠지~!오늘은 많이 놀자( ˶ˊᵕˋ˶)˶」<br><br>마후 「그래~!사카타는 항상 잘 자지 않는 것 같아!」<br><br>사카타 「하 ?」',
            '우라타 씨와의 콜라보레이션 영상이 올라왔습니다!<br><br>곡의 편곡을 담당했습니다!<br><br>그리고 언어화하기는 어렵지만, 공주님으로 노래하고 있습니다.비교적 귀엽다고 생각합니다.',
            '택시 내릴 때 실수로 "잘 먹었습니다."라고 말해 버려서, 부끄러워서 당황해서 내렸는데 발이 걸려 낮 신주쿠역 앞에서 공중제비를 했다.안녕히 계십시요。',
            '치과에서<br><br>선생님「다른 궁금한 점이 있나요??」<br>복「아, ..... ぉお...」<br>선생님「사랑니가 있네요~!!큰 병원의  소개장을 발급해드리겠습니다.!다음 예약이 가능한가요??」<br>복「예.. 아......ｯ네〃ｯ!!!」<br>선생님「인터넷 예약이군요~!! 알겠습니다!」<br><br>한심한<br>',
            '제가 좋아하는 홋카이도에 다녀왔습니다.<br>며칠간 컴퓨터와 떨어져 있었지만, 아무 일 없는 평화로운 세상은 제대로 있어 마 음이 편해졌습니다.<br>이번 달부터 연말까지 대대적인 발표를 할 예정입니다.<br><br>참고로 이 사진은 뷔페에 대한 욕심쟁이  챔피언십... 15분 동안 돌아다니다가 찍은 사진입니다.',
            '외출을 위해 변장했습니다<br>지금을 사는 닌자의 취향입니다',
            '오늘의 비정기 마후마후 밥<br><br>마후마후 분노의 분해 오므라이스<br><br>너무 무리해서 미쳐버렸다'
        ]

        window.addEventListener('load', page_onLoad)
        
        const popup_element = document.getElementsByClassName('popup_dim')[0];
        const webhookInputElement = document.getElementById('webhookURL');
        const mentionIdInputElement = document.getElementById('roleId');
        const formElement = document.getElementById('registerForm');
        const allowMentionElement = document.getElementById('allowMention');
        const allowReceiveNotiElement = document.getElementById('allowReceiveNoti');
        const embedContent = document.getElementsByClassName('embed-content')[0];

        webhookInputElement.addEventListener('input', on_formChanged)
        mentionIdInputElement.addEventListener('input', on_formChanged)

        function changeRoleIDStatus(event) {
            mentionIdInputElement.disabled = !event.target.checked;
        }

        function vaildateValue() {
            let roleID = mentionIdInputElement.value;
            let webhookURL = webhookInputElement.value;
            let isVaildate = true;

            if (!!!webhookURL.match(WEBHOOK_REGEX)) {
                webhookInputElement.setCustomValidity('올바른 웹후크 URL이 아님');
                isVaildate = false;
            } else {
                webhookInputElement.setCustomValidity('');

            }

            if (roleID.trim() == '@everyone' || 
                roleID.trim() == '@here' || 
                !!roleID.match(ROLEID_REGEX)) {
                mentionIdInputElement.setCustomValidity('');
            } else {
                mentionIdInputElement.setCustomValidity('올바른 맨션 형식이 아님');
                isVaildate = false;
            }

            formElement.classList.add('was-validated')

            return isVaildate;
        }

        function on_formChanged() {
            vaildateValue();
        }

        function openRegister() {
            popup_element.classList.remove('hidden');
            webhookInputElement.value = 'https://discord.com/api/webhooks/1254054101390462976/WXk_ZtFJ5JtgoK8rVD9Q-wSVZFhQieCcc-ohowwfs5X6eWouNIz4Bn4bRx9LAA82xPiE';
            allowMentionElement.checked = false;
            mentionIdInputElement.value = '@everyone';
            mentionIdInputElement.disabled = true;
            allowReceiveNotiElement.checked = true;
        }

        function closeRegister() {
            popup_element.classList.add('hidden');
        }

        function showSuccess(text) {
            document.getElementById('success').innerText = text;
            document.getElementById('success').classList.remove('alert-hidden');
            setTimeout(() => document.getElementById('success').classList.add('alert-hidden'), 2000);
        }

        function showError(text) {
            document.getElementById('error').innerText = text;
            document.getElementById('error').classList.remove('alert-hidden');
            setTimeout(() => document.getElementById('error').classList.add('alert-hidden'), 2000);
        }

        function enableButtons() {
            document.querySelector('.delete').disabled = false
            document.querySelector('.subscribe').disabled = false;
            document.querySelector('.edit').disabled = false;
        }

        function disableButtons() {
            document.querySelector('.delete').disabled = true;
            document.querySelector('.subscribe').disabled = true;
            document.querySelector('.edit').disabled = true;

        }

        async function registerWebhook() {
            let webhookURL = webhookInputElement.value;
            let roleID = allowMentionElement.checked ? mentionIdInputElement.value : -1;
            let allowSendNoti = allowReceiveNotiElement.checked;

            disableButtons();

            if(!vaildateValue()) return;

            try {
                let response = await (await fetch('/api/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        url: webhookURL,
                        roleID: roleID,
                        sendNoti: allowSendNoti
                    })
                })).json();
                if (response.status == -2) showError('웹후크 등록에 실패했습니다: ' + response.message);
                else if (response.status != 0) throw new Error();
                else showSuccess('웹후크 등록 성공!');
            }catch {
                showError('웹후크 등록에 실패했습니다: 알 수 없는 오류가 발생하였습니다.')
            }
            enableButtons();
            closeRegister();
        }

        async function editWebhook() {
            let webhookURL = webhookInputElement.value;
            let roleID = allowMentionElement.checked ? mentionIdInputElement.value : -1;
            let allowSendNoti = allowReceiveNotiElement.checked;

            if (!vaildateValue()) return;

            try {
                let response = await (await fetch('/api/edit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        url: webhookURL,
                        roleID: roleID,
                        sendNoti: allowSendNoti
                    })
                })).json();

                if(response.status != 0) throw new Error();
                showSuccess('웹후크 수정 성공!');
            } catch {
                showError('웹후크 수정에 실패했습니다: 알 수 없는 오류가 발생하였습니다.')
            }
            closeRegister();
        }

        async function unregisterWebhook() {
            let webhookURL = webhookInputElement.value;

            if (!!!webhookURL.match(WEBHOOK_REGEX)) {
                webhookInputElement.setCustomValidity('aw');
                formElement.classList.add('was-validate');
                return;
            } else
                webhookInputElement.setCustomValidity('');

            try {
                let response = await(await fetch('/api/unregister?url=' + encodeURIComponent(webhookURL), {
                    method: 'DELETE'
                })).json();

                if (response.status != 0) throw new Error();
                showSuccess('웹후크 삭제 성공!');
            } catch {
                showError('웹후크 삭제에 실패했습니다: 알 수 없는 오류가 발생하였습니다.')
            }
            closeRegister();
        }

        let embed_idx = 0;
        
        function page_onLoad() {
            embedContent.innerHTML = EMBED_TEXT[embed_idx];
            setInterval(transform_embed_text, 5000)

            getNoticeList();
        }

        function transform_embed_text() {
            embedContent.style.maxHeight = '0vh';
            embedContent.style.opacity = '0';
            embed_idx = (embed_idx + 1) % EMBED_TEXT.length
            setTimeout(() => embedContent.innerHTML = EMBED_TEXT[embed_idx], 500);
            setTimeout(() => { embedContent.style.maxHeight = '100vh'; embedContent.style.opacity = '1'; }, 750);
        }

        function createNoticeItem(title, date, content) {
            const noticeItem = document.createElement('div');
            const titleItem = document.createElement('span');
            titleItem.classList.add('h3');
            const dateItem = document.createElement('span');
            const contentItem = document.createElement('p');
            const splitLine = document.createElement('hr');

            let uploadDate = new Date(date);

            noticeItem.classList.add('notice-item');
            titleItem.textContent = title;
            dateItem.textContent = `${uploadDate.getFullYear()}-${uploadDate.getMonth()+1}-${uploadDate.getDate()}`;
            contentItem.textContent = content;
            contentItem.style.marginTop = '10px';
            noticeItem.appendChild(titleItem);
            noticeItem.appendChild(document.createElement('br'));
            noticeItem.appendChild(dateItem);
            noticeItem.appendChild(contentItem);
            noticeItem.appendChild(splitLine);

            return noticeItem;
        }

        async function getNoticeList() {
            const noticeList = document.getElementsByClassName('notice-list')[0];
            try {
                let res = await fetch('/api/getNotices');
                let notices = await res.json();
                if(!!!notices.data.length) {
                    noticeList.innerHTML = '<span>아직 올라온 공지가 없네요 ¯\\(°_o)/¯</span>';
                    return;
                }
                for(let i of notices.data) {
                    noticeList.appendChild(createNoticeItem(i.title, i.date, i.content));
                }
            }catch(e){
                console.error(e);
                noticeList.innerHTML = '<span>공지사항을 불러오는데 실패하였습니다.</span>';
            }
        }
    </script>
</body>
</html>